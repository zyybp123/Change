package cn.bpzzr.change.bean.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.bpzzr.change.net.common.ResInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RES_INFO".
*/
public class ResInfoDao extends AbstractDao<ResInfo, Long> {

    public static final String TABLENAME = "RES_INFO";

    /**
     * Properties of entity ResInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property LocalId = new Property(0, Long.class, "localId", true, "_id");
        public final static Property ResId = new Property(1, long.class, "resId", false, "RES_ID");
        public final static Property ResName = new Property(2, String.class, "resName", false, "RES_NAME");
        public final static Property FileDir = new Property(3, String.class, "fileDir", false, "FILE_DIR");
        public final static Property FullName = new Property(4, String.class, "fullName", false, "FULL_NAME");
        public final static Property TotalSize = new Property(5, long.class, "totalSize", false, "TOTAL_SIZE");
        public final static Property CurrentSize = new Property(6, long.class, "currentSize", false, "CURRENT_SIZE");
        public final static Property Progress = new Property(7, int.class, "progress", false, "PROGRESS");
        public final static Property Url = new Property(8, String.class, "url", false, "URL");
        public final static Property AbsolutePath = new Property(9, String.class, "absolutePath", false, "ABSOLUTE_PATH");
        public final static Property Status = new Property(10, int.class, "status", false, "STATUS");
        public final static Property Type = new Property(11, String.class, "type", false, "TYPE");
        public final static Property LastModifyTime = new Property(12, long.class, "lastModifyTime", false, "LAST_MODIFY_TIME");
    }


    public ResInfoDao(DaoConfig config) {
        super(config);
    }
    
    public ResInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RES_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: localId
                "\"RES_ID\" INTEGER NOT NULL ," + // 1: resId
                "\"RES_NAME\" TEXT," + // 2: resName
                "\"FILE_DIR\" TEXT," + // 3: fileDir
                "\"FULL_NAME\" TEXT," + // 4: fullName
                "\"TOTAL_SIZE\" INTEGER NOT NULL ," + // 5: totalSize
                "\"CURRENT_SIZE\" INTEGER NOT NULL ," + // 6: currentSize
                "\"PROGRESS\" INTEGER NOT NULL ," + // 7: progress
                "\"URL\" TEXT," + // 8: url
                "\"ABSOLUTE_PATH\" TEXT," + // 9: absolutePath
                "\"STATUS\" INTEGER NOT NULL ," + // 10: status
                "\"TYPE\" TEXT," + // 11: type
                "\"LAST_MODIFY_TIME\" INTEGER NOT NULL );"); // 12: lastModifyTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RES_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ResInfo entity) {
        stmt.clearBindings();
 
        Long localId = entity.getLocalId();
        if (localId != null) {
            stmt.bindLong(1, localId);
        }
        stmt.bindLong(2, entity.getResId());
 
        String resName = entity.getResName();
        if (resName != null) {
            stmt.bindString(3, resName);
        }
 
        String fileDir = entity.getFileDir();
        if (fileDir != null) {
            stmt.bindString(4, fileDir);
        }
 
        String fullName = entity.getFullName();
        if (fullName != null) {
            stmt.bindString(5, fullName);
        }
        stmt.bindLong(6, entity.getTotalSize());
        stmt.bindLong(7, entity.getCurrentSize());
        stmt.bindLong(8, entity.getProgress());
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(9, url);
        }
 
        String absolutePath = entity.getAbsolutePath();
        if (absolutePath != null) {
            stmt.bindString(10, absolutePath);
        }
        stmt.bindLong(11, entity.getStatus());
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(12, type);
        }
        stmt.bindLong(13, entity.getLastModifyTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ResInfo entity) {
        stmt.clearBindings();
 
        Long localId = entity.getLocalId();
        if (localId != null) {
            stmt.bindLong(1, localId);
        }
        stmt.bindLong(2, entity.getResId());
 
        String resName = entity.getResName();
        if (resName != null) {
            stmt.bindString(3, resName);
        }
 
        String fileDir = entity.getFileDir();
        if (fileDir != null) {
            stmt.bindString(4, fileDir);
        }
 
        String fullName = entity.getFullName();
        if (fullName != null) {
            stmt.bindString(5, fullName);
        }
        stmt.bindLong(6, entity.getTotalSize());
        stmt.bindLong(7, entity.getCurrentSize());
        stmt.bindLong(8, entity.getProgress());
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(9, url);
        }
 
        String absolutePath = entity.getAbsolutePath();
        if (absolutePath != null) {
            stmt.bindString(10, absolutePath);
        }
        stmt.bindLong(11, entity.getStatus());
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(12, type);
        }
        stmt.bindLong(13, entity.getLastModifyTime());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ResInfo readEntity(Cursor cursor, int offset) {
        ResInfo entity = new ResInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // localId
            cursor.getLong(offset + 1), // resId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // resName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // fileDir
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // fullName
            cursor.getLong(offset + 5), // totalSize
            cursor.getLong(offset + 6), // currentSize
            cursor.getInt(offset + 7), // progress
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // url
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // absolutePath
            cursor.getInt(offset + 10), // status
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // type
            cursor.getLong(offset + 12) // lastModifyTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ResInfo entity, int offset) {
        entity.setLocalId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setResId(cursor.getLong(offset + 1));
        entity.setResName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFileDir(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFullName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTotalSize(cursor.getLong(offset + 5));
        entity.setCurrentSize(cursor.getLong(offset + 6));
        entity.setProgress(cursor.getInt(offset + 7));
        entity.setUrl(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAbsolutePath(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setStatus(cursor.getInt(offset + 10));
        entity.setType(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setLastModifyTime(cursor.getLong(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ResInfo entity, long rowId) {
        entity.setLocalId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ResInfo entity) {
        if(entity != null) {
            return entity.getLocalId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ResInfo entity) {
        return entity.getLocalId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
